
#####开发环境

#server.port=8081
#server.session.timeout=10
server.tomcat.uri-encoding=utf8

#随机字符串
appleyk.name = ${random.value}
#随机整数
appleyk.age = ${random.int}
#10以内的随机数
appleyk.size = ${random.int(10)}


spring:
    application:
        name: monocase-framework # 应用名称
    jackson:
        date-format: yyyy-MM-dd HH:mm:ss # 日期格式
    datasource:
        druid: # 连接池别名
        url: jdbc:mysql://${MYSQL_HOST:192.168.1.200}:${MYSQL_PORT:3306}/zhya-monocase-framework?useUnicode=true&characterEncoding=utf8
        username: root
        password: root@123
        type: com.alibaba.druid.pool.DruidDataSource # 连接池类型
        driver-class-name: com.mysql.cj.jdbc.Driver
        poolPreparedStatements: true
        maxOpenPreparedStatements: 100
        maxActive: 100
        maxWait: 5000

#Mybatis
mybatis.mapper-locations=classpath*:mapper/*Mapper.xml
mybatis.type-aliases-package=com.sunnada.hurd
#开启MyBatis的二级缓存
mybatis.configuration.cache-enabled=true

mybatis:
    mapper-locations: classpath*:mapper/*Mapper.xml
    type-aliases-package: com.springboottemplate.redis.entity
    basepackage: com.zhya.mapper
    xmlLocation: classpath:mapper/**/*.xml
    #  config-location: classpath:mybatis-config.xml
    configuration:
        map-underscore-to-camel-case: true # 下划线转驼峰

# 分页配置
pagehelper:
    helper-dialect: mysql
    reasonable: true
    support-methods-arguments: true
    params: count=countSql

#datasource configuration
spring.datasource.mysql.url=jdbc:mysql://localhost:3306/test?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.mysql.username=wayne
spring.datasource.mysql.password=wayne
spring.datasource.mysql.driver-Class-Name=com.mysql.cj.jdbc.Driver

spring.datasource.h2.url=jdbc:h2:file:~/.h2/h2
spring.datasource.h2.username=
spring.datasource.h2.password=
spring.datasource.h2.driver-class-name=org.h2.Driver

#redis configurations
spring.redis.hostName=158.168.8.5
spring.redis.port=6379
# Redis服务器连接密码（默认为空）
spring.redis.password=654321
# Redis数据库索引（默认为0）
spring.redis.database=0    
#springboot版本为2.0.2RELEASE中的RedisProperties配置文件类，从图中可知pool属性则被封装到了内部静态类Jedis和Lettuce中去了
spring.redis.jedis.pool.max-active=8
# 连接池最大阻塞等待时间（使用负值表示没有限制）
spring.redis.jedis.pool.max-wait=-1
# 连接池中的最大空闲连接
spring.redis.jedis.pool.max-idle=8
# 连接池中的最小空闲连接
spring.redis.jedis.pool.min-idle=0
# 连接超时时间（毫秒）
spring.redis.timeout=500
# 是否开启缓存
spring.redis.cache.on=false


#rabbitmq configurations
spring.rabbitmq.host=127.0.0.1
spring.rabbitmq.port=5672
spring.rabbitmq.username=wayne
spring.rabbitmq.password=wayne
spring.rabbitmq.virtual-host=/
spring.rabbitmq.listener.concurrency=10
spring.rabbitmq.listener.max-concurrency=20
spring.rabbitmq.listener.prefetch=5
spring.rabbitmq.connection-timeout=15000
spring.rabbitmq.publisher-confirms=true
spring.rabbitmq.publisher-returns=true
spring.rabbitmq.template.mandatory=true
spring.rabbitmq.listener.simple.acknowledge-mode=manual

logging:
    level:
    #        tk.mybatis: DEBUG
        com.zhya: DEBUG # 输出sql日志


logging.level.root=DEBUG
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=DEBUG

log4j.rootLogger=DEBUG, stdout 
log4j.logger.my.pkg=info
log4j.appender.stdout=org.apache.log4j.ConsoleAppender 
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout 
log4j.appender.stdout.layout.ConversionPattern=%d [%-5p] %c - %m%n